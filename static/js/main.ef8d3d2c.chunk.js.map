{"version":3,"sources":["CurrencyCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["calculatePriceWithCurrencyRates","async","fee","shippingFee","rate","response","fetch","ok","Error","data","json","Number","rates","JPY","error","console","fetchRate","oneToOneRatio","fixedFee","percentageFee","convertedShippingPrice","priceNew","Math","max","newTotal","log","parseFloat","toFixed","styles","container","fontFamily","display","alignItems","maxWidth","margin","padding","textAlign","backgroundColor","borderRadius","position","top","left","transform","title","fontSize","color","marginBottom","fontWeight","inputContainer","flexDirection","gap","label","inputBox","width","border","marginTop","button","cursor","transition","resultBox","boxShadow","errorBox","buttonHover","CurrencyCalculator","setFixedFee","useState","setShippingFee","result","setResult","setError","setRate","React","createElement","style","type","value","onChange","e","target","placeholder","inputLabel","onClick","trim","isNaN","calculatedPrice","message","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ef8d3d2c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    AreaChart, Area,\n    CartesianGrid, XAxis, YAxis\n} from 'recharts';\n\nconst fetchRate = async () => {\n    try {\n        const response = await fetch('https://api.currencyfreaks.com/v2.0/rates/latest?apikey=b4431777018d4b3fb78f72e1081a14a5&symbols=JPY');\n        if (!response.ok) {\n            throw new Error('API request failed');\n        }\n        const data = await response.json();\n        return Number(data.rates.JPY); // Return the rate\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"Error fetching the exchange rate.\");\n    }\n};\n\nconst calculatePriceWithCurrencyRates = async (fee, shippingFee) => {\n    try {\n        const rate = await fetchRate();\n        if (!rate) {\n            throw new Error(\"Rate is undefined or invalid.\");\n        }\n        const oneToOneRatio = 100; // Customize this value\n        const bufferRate = 0.15; // Customize this value\n        // Paypal overhead\n        const fixedFee = 49;\n        const percentageFee = 0.044;\n\n        // adjust for paypal\n        const augmentedFee = (fee + fixedFee) / (1 - percentageFee);\n        const augmentedShippingFee = (shippingFee + fixedFee) / (1 - percentageFee);\n        const convertedBasePrice = augmentedFee / rate;\n        const convertedShippingPrice = augmentedShippingFee / rate;\n\n        const priceNew = convertedBasePrice * (1 + bufferRate * Math.max(0, (rate - oneToOneRatio) / oneToOneRatio));\n        const newTotal = priceNew + convertedShippingPrice;\n        console.log(priceNew)\n        console.log(convertedShippingPrice)\n        return [parseFloat(newTotal.toFixed(2)), rate]; // Round to 2 decimal places\n    } catch (error) {\n        console.error(\"Error in calculatePriceWithCurrencyRates:\", error);\n        throw error;\n    }\n};\n\nconst CurrencyCalculator = () => {\n    const [fixedFee, setFixedFee] = useState(\"\");\n    const [shippingFee, setShippingFee] = useState(\"\");\n    const [result, setResult] = useState(null);\n    const [error, setError] = useState(null);\n    const [rate, setRate] = useState(\"\");\n\n    const handleCalculate = async () => {\n        setError(null); // Reset error state\n        setResult(null); // Reset result state\n        try {\n            if (!fixedFee.trim() || isNaN(Number(fixedFee))) {\n                setError(\"Please enter a valid number for the fixed fee.\");\n                return;\n            }\n            const calculatedPrice = await calculatePriceWithCurrencyRates(Number(fixedFee), Number(shippingFee));\n            setResult(calculatedPrice[0]); // Update the result state\n            setRate(calculatedPrice[1]);\n            console.log(rate)\n        } catch (error) {\n            setError(error.message || \"An error occurred.\");\n        }\n    };\n\n    return (\n        <div>\n            <div style={styles.container}>\n                <h1 style={styles.title}>カネハチ米国価格計算機</h1>\n                <div style={styles.inputContainer}>\n                    <label style={styles.label}>\n                        送料を入力してください:\n                        <input\n                            type=\"number\"\n                            value={shippingFee}\n                            onChange={(e) => setShippingFee(e.target.value)}\n                            placeholder=\"例: 4400\"\n                            style={styles.inputBox}\n                        />\n                        <span style={styles.inputLabel}><b>JPY</b></span>\n                    </label>\n\n                    <label style={styles.label}>\n                        値段を入力してください:\n                        <input\n                            type=\"number\"\n                            value={fixedFee}\n                            onChange={(e) => setFixedFee(e.target.value)}\n                            placeholder=\"例: 44000\"\n                            style={styles.inputBox}\n                        />\n                        <span style={styles.inputLabel}><b>JPY</b></span>\n                    </label>\n                    <button onClick={handleCalculate} style={styles.button}>計算</button>\n                </div>\n                {result !== null && (\n                    <div style={styles.resultBox}>\n                        <h2>新しい値段: ${result}</h2>\n                        <h2>(1 USD = ¥{rate})</h2>\n                    </div>\n                )}\n                {error && (\n                    <div style={styles.errorBox}>\n                        <p>{error}</p>\n                    </div>\n                )}\n            </div>\n        </div>\n\n    );\n};\n\nconst styles = {\n    container: {\n        fontFamily: \"'Arial', sans-serif\",\n        display: 'flex',\n        alignItems: 'center',\n        maxWidth: \"600px\",\n        margin: \"0 auto\", // Centers horizontally\n        padding: \"20px\",\n        textAlign: \"center\",\n        backgroundColor: \"#FFFFFF\",\n        borderRadius: \"10px\",\n        position: \"absolute\", // Required for vertical centering\n        top: \"50%\", // Pushes the container down 50% of the viewport height\n        left: \"50%\", // Pushes the container right 50% of the viewport width\n        transform: \"translate(-50%, -50%)\", // Offsets the position to center\n    },\n    title: {\n        fontSize: \"35px\",\n        color: \"#B53737\",\n        marginBottom: \"20px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Poppins, sans-serif\",\n    },\n    inputContainer: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: \"10px\",\n        marginBottom: \"20px\",\n    },\n    label: {\n        fontSize: \"16px\",\n        color: \"#555\",\n    },\n    inputBox: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n        padding: \"10px\",\n        border: \"1px solid #ddd\",\n        borderRadius: \"8px\",\n        fontSize: \"16px\",\n        marginTop: \"5px\",\n    },\n    button: {\n        padding: \"10px 20px\",\n        backgroundColor: \"#5bb450\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"8px\",\n        cursor: \"pointer\",\n        fontSize: \"16px\",\n        transition: \"background-color 0.3s\",\n    },\n    resultBox: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        backgroundColor: \"#e6ffe6\",\n        borderRadius: \"8px\",\n        boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.1)\",\n    },\n    errorBox: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        backgroundColor: \"#ffe6e6\",\n        borderRadius: \"8px\",\n        color: \"#d9534f\",\n    },\n    buttonHover: {\n        backgroundColor: \"#0056b3\",\n    },\n};\n\nexport default CurrencyCalculator;\n","import React from 'react';\nimport './App.css';\nimport CurrencyCalculator from './CurrencyCalculator';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <CurrencyCalculator />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}