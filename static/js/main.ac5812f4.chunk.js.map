{"version":3,"sources":["CurrencyCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["calculatePriceWithCurrencyRates","async","rate","response","fetch","ok","Error","data","json","Number","rates","JPY","error","console","fetchRate","oneToOneRatio","priceNew","fee","Math","max","parseFloat","toFixed","styles","container","fontFamily","maxWidth","margin","padding","textAlign","backgroundColor","borderRadius","position","top","left","transform","title","fontSize","color","marginBottom","fontWeight","inputContainer","display","flexDirection","alignItems","gap","label","inputBox","width","border","marginTop","button","cursor","transition","resultBox","boxShadow","errorBox","buttonHover","CurrencyCalculator","fixedFee","setFixedFee","useState","result","setResult","setError","setRate","React","createElement","style","type","value","onChange","e","target","placeholder","inputLabel","onClick","trim","isNaN","calculatedPrice","log","message","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ac5812f4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    AreaChart, Area,\n    CartesianGrid, XAxis, YAxis\n} from 'recharts';\n\nconst fetchRate = async () => {\n    try {\n        const response = await fetch('https://api.currencyfreaks.com/v2.0/rates/latest?apikey=b4431777018d4b3fb78f72e1081a14a5&symbols=JPY');\n        if (!response.ok) {\n            throw new Error('API request failed');\n        }\n        const data = await response.json();\n        return Number(data.rates.JPY); // Return the rate\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"Error fetching the exchange rate.\");\n    }\n};\n\nconst calculatePriceWithCurrencyRates = async (fee) => {\n    try {\n        const rate = await fetchRate();\n        if (!rate) {\n            throw new Error(\"Rate is undefined or invalid.\");\n        }\n        const oneToOneRatio = 100; // Customize this value\n        const bufferRate = 0.1; // Customize this value\n        // Paypal overhead\n        const fixedFee = 49;\n        const percentageFee = 0.044;\n\n        // adjust for paypal\n        const augmentedFee = (fee + fixedFee) / (1 - percentageFee);\n        const convertedBasePrice = augmentedFee / rate;\n\n        const priceNew = convertedBasePrice * (1 + bufferRate * Math.max(0, (rate - oneToOneRatio) / oneToOneRatio));\n        return [parseFloat(priceNew.toFixed(2)), rate]; // Round to 2 decimal places\n    } catch (error) {\n        console.error(\"Error in calculatePriceWithCurrencyRates:\", error);\n        throw error;\n    }\n};\n\nconst CurrencyCalculator = () => {\n    const [fixedFee, setFixedFee] = useState(\"\");\n    const [result, setResult] = useState(null);\n    const [error, setError] = useState(null);\n    const [rate, setRate] = useState(\"\");\n\n    const handleCalculate = async () => {\n        setError(null); // Reset error state\n        setResult(null); // Reset result state\n        try {\n            if (!fixedFee.trim() || isNaN(Number(fixedFee))) {\n                setError(\"Please enter a valid number for the fixed fee.\");\n                return;\n            }\n            const calculatedPrice = await calculatePriceWithCurrencyRates(Number(fixedFee));\n            setResult(calculatedPrice[0]); // Update the result state\n            setRate(calculatedPrice[1]);\n            console.log(rate)\n        } catch (error) {\n            setError(error.message || \"An error occurred.\");\n        }\n    };\n\n    return (\n        <div>\n            <div style={styles.container}>\n                <h1 style={styles.title}>Currency Conversion Calculator</h1>\n                <div style={styles.inputContainer}>\n                    <label style={styles.label}>\n                        値段を入力してください:\n                        <input\n                            type=\"number\"\n                            value={fixedFee}\n                            onChange={(e) => setFixedFee(e.target.value)}\n                            placeholder=\"例: 44000\"\n                            style={styles.inputBox}\n                        />\n                        <span style={styles.inputLabel}><b>JPY</b></span>\n                    </label>\n                    <button onClick={handleCalculate} style={styles.button}>Calculate</button>\n                </div>\n                {result !== null && (\n                    <div style={styles.resultBox}>\n                        <h2>新しい値段: ${result}</h2>\n                        <h2>1 USD = ¥{rate}</h2>\n                    </div>\n                )}\n                {error && (\n                    <div style={styles.errorBox}>\n                        <p>{error}</p>\n                    </div>\n                )}\n            </div>\n        </div>\n\n    );\n};\n\nconst styles = {\n    container: {\n        fontFamily: \"'Arial', sans-serif\",\n        maxWidth: \"600px\",\n        margin: \"0 auto\", // Centers horizontally\n        padding: \"20px\",\n        textAlign: \"center\",\n        backgroundColor: \"#FFFFFF\",\n        borderRadius: \"10px\",\n        position: \"absolute\", // Required for vertical centering\n        top: \"50%\", // Pushes the container down 50% of the viewport height\n        left: \"50%\", // Pushes the container right 50% of the viewport width\n        transform: \"translate(-50%, -50%)\", // Offsets the position to center\n    },\n    title: {\n        fontSize: \"35px\",\n        color: \"#2B3BFF\",\n        marginBottom: \"20px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Poppins, sans-serif\",\n    },\n    inputContainer: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: \"10px\",\n        marginBottom: \"20px\",\n    },\n    label: {\n        fontSize: \"16px\",\n        color: \"#555\",\n    },\n    inputBox: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n        padding: \"10px\",\n        border: \"1px solid #ddd\",\n        borderRadius: \"8px\",\n        fontSize: \"16px\",\n        marginTop: \"5px\",\n    },\n    button: {\n        padding: \"10px 20px\",\n        backgroundColor: \"#5bb450\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"8px\",\n        cursor: \"pointer\",\n        fontSize: \"16px\",\n        transition: \"background-color 0.3s\",\n    },\n    resultBox: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        backgroundColor: \"#e6ffe6\",\n        borderRadius: \"8px\",\n        boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.1)\",\n    },\n    errorBox: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        backgroundColor: \"#ffe6e6\",\n        borderRadius: \"8px\",\n        color: \"#d9534f\",\n    },\n    buttonHover: {\n        backgroundColor: \"#0056b3\",\n    },\n};\n\nexport default CurrencyCalculator;\n","import React from 'react';\nimport './App.css';\nimport CurrencyCalculator from './CurrencyCalculator';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <CurrencyCalculator />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}